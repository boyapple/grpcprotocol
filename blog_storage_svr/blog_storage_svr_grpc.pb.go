// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: blog_storage_svr.proto

package blog_storage_svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogStorageSvr_QueryCategoryInfo_FullMethodName  = "/blog_storage_svr.BlogStorageSvr/QueryCategoryInfo"
	BlogStorageSvr_GetCategoryInfo_FullMethodName    = "/blog_storage_svr.BlogStorageSvr/GetCategoryInfo"
	BlogStorageSvr_CreateCategoryInfo_FullMethodName = "/blog_storage_svr.BlogStorageSvr/CreateCategoryInfo"
	BlogStorageSvr_UpdateCategoryInfo_FullMethodName = "/blog_storage_svr.BlogStorageSvr/UpdateCategoryInfo"
	BlogStorageSvr_QueryTagInfo_FullMethodName       = "/blog_storage_svr.BlogStorageSvr/QueryTagInfo"
	BlogStorageSvr_GetTagInfo_FullMethodName         = "/blog_storage_svr.BlogStorageSvr/GetTagInfo"
	BlogStorageSvr_CreateTagInfo_FullMethodName      = "/blog_storage_svr.BlogStorageSvr/CreateTagInfo"
	BlogStorageSvr_UpdateTagInfo_FullMethodName      = "/blog_storage_svr.BlogStorageSvr/UpdateTagInfo"
)

// BlogStorageSvrClient is the client API for BlogStorageSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogStorageSvrClient interface {
	QueryCategoryInfo(ctx context.Context, in *QueryCategoryInfoReq, opts ...grpc.CallOption) (*QueryCategoryInfoRsp, error)
	GetCategoryInfo(ctx context.Context, in *GetCategoryInfoReq, opts ...grpc.CallOption) (*GetCategoryInfoRsp, error)
	CreateCategoryInfo(ctx context.Context, in *CreateCategoryInfoReq, opts ...grpc.CallOption) (*CreateCategoryInfoRsp, error)
	UpdateCategoryInfo(ctx context.Context, in *UpdateCategoryInfoReq, opts ...grpc.CallOption) (*UpdateCategoryInfoRsp, error)
	QueryTagInfo(ctx context.Context, in *QueryTagInfoReq, opts ...grpc.CallOption) (*QueryTagInfoRsp, error)
	GetTagInfo(ctx context.Context, in *GetTagInfoReq, opts ...grpc.CallOption) (*GetTagInfoRsp, error)
	CreateTagInfo(ctx context.Context, in *CreateTagInfoReq, opts ...grpc.CallOption) (*CreateTagInfoRsp, error)
	UpdateTagInfo(ctx context.Context, in *UpdateTagInfoReq, opts ...grpc.CallOption) (*UpdateTagInfoRsp, error)
}

type blogStorageSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogStorageSvrClient(cc grpc.ClientConnInterface) BlogStorageSvrClient {
	return &blogStorageSvrClient{cc}
}

func (c *blogStorageSvrClient) QueryCategoryInfo(ctx context.Context, in *QueryCategoryInfoReq, opts ...grpc.CallOption) (*QueryCategoryInfoRsp, error) {
	out := new(QueryCategoryInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_QueryCategoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) GetCategoryInfo(ctx context.Context, in *GetCategoryInfoReq, opts ...grpc.CallOption) (*GetCategoryInfoRsp, error) {
	out := new(GetCategoryInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_GetCategoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) CreateCategoryInfo(ctx context.Context, in *CreateCategoryInfoReq, opts ...grpc.CallOption) (*CreateCategoryInfoRsp, error) {
	out := new(CreateCategoryInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_CreateCategoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) UpdateCategoryInfo(ctx context.Context, in *UpdateCategoryInfoReq, opts ...grpc.CallOption) (*UpdateCategoryInfoRsp, error) {
	out := new(UpdateCategoryInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_UpdateCategoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) QueryTagInfo(ctx context.Context, in *QueryTagInfoReq, opts ...grpc.CallOption) (*QueryTagInfoRsp, error) {
	out := new(QueryTagInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_QueryTagInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) GetTagInfo(ctx context.Context, in *GetTagInfoReq, opts ...grpc.CallOption) (*GetTagInfoRsp, error) {
	out := new(GetTagInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_GetTagInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) CreateTagInfo(ctx context.Context, in *CreateTagInfoReq, opts ...grpc.CallOption) (*CreateTagInfoRsp, error) {
	out := new(CreateTagInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_CreateTagInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) UpdateTagInfo(ctx context.Context, in *UpdateTagInfoReq, opts ...grpc.CallOption) (*UpdateTagInfoRsp, error) {
	out := new(UpdateTagInfoRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_UpdateTagInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogStorageSvrServer is the server API for BlogStorageSvr service.
// All implementations should embed UnimplementedBlogStorageSvrServer
// for forward compatibility
type BlogStorageSvrServer interface {
	QueryCategoryInfo(context.Context, *QueryCategoryInfoReq) (*QueryCategoryInfoRsp, error)
	GetCategoryInfo(context.Context, *GetCategoryInfoReq) (*GetCategoryInfoRsp, error)
	CreateCategoryInfo(context.Context, *CreateCategoryInfoReq) (*CreateCategoryInfoRsp, error)
	UpdateCategoryInfo(context.Context, *UpdateCategoryInfoReq) (*UpdateCategoryInfoRsp, error)
	QueryTagInfo(context.Context, *QueryTagInfoReq) (*QueryTagInfoRsp, error)
	GetTagInfo(context.Context, *GetTagInfoReq) (*GetTagInfoRsp, error)
	CreateTagInfo(context.Context, *CreateTagInfoReq) (*CreateTagInfoRsp, error)
	UpdateTagInfo(context.Context, *UpdateTagInfoReq) (*UpdateTagInfoRsp, error)
}

// UnimplementedBlogStorageSvrServer should be embedded to have forward compatible implementations.
type UnimplementedBlogStorageSvrServer struct {
}

func (UnimplementedBlogStorageSvrServer) QueryCategoryInfo(context.Context, *QueryCategoryInfoReq) (*QueryCategoryInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCategoryInfo not implemented")
}
func (UnimplementedBlogStorageSvrServer) GetCategoryInfo(context.Context, *GetCategoryInfoReq) (*GetCategoryInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryInfo not implemented")
}
func (UnimplementedBlogStorageSvrServer) CreateCategoryInfo(context.Context, *CreateCategoryInfoReq) (*CreateCategoryInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryInfo not implemented")
}
func (UnimplementedBlogStorageSvrServer) UpdateCategoryInfo(context.Context, *UpdateCategoryInfoReq) (*UpdateCategoryInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryInfo not implemented")
}
func (UnimplementedBlogStorageSvrServer) QueryTagInfo(context.Context, *QueryTagInfoReq) (*QueryTagInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTagInfo not implemented")
}
func (UnimplementedBlogStorageSvrServer) GetTagInfo(context.Context, *GetTagInfoReq) (*GetTagInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagInfo not implemented")
}
func (UnimplementedBlogStorageSvrServer) CreateTagInfo(context.Context, *CreateTagInfoReq) (*CreateTagInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagInfo not implemented")
}
func (UnimplementedBlogStorageSvrServer) UpdateTagInfo(context.Context, *UpdateTagInfoReq) (*UpdateTagInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagInfo not implemented")
}

// UnsafeBlogStorageSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogStorageSvrServer will
// result in compilation errors.
type UnsafeBlogStorageSvrServer interface {
	mustEmbedUnimplementedBlogStorageSvrServer()
}

func RegisterBlogStorageSvrServer(s grpc.ServiceRegistrar, srv BlogStorageSvrServer) {
	s.RegisterService(&BlogStorageSvr_ServiceDesc, srv)
}

func _BlogStorageSvr_QueryCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCategoryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).QueryCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_QueryCategoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).QueryCategoryInfo(ctx, req.(*QueryCategoryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_GetCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).GetCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_GetCategoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).GetCategoryInfo(ctx, req.(*GetCategoryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_CreateCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).CreateCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_CreateCategoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).CreateCategoryInfo(ctx, req.(*CreateCategoryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_UpdateCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).UpdateCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_UpdateCategoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).UpdateCategoryInfo(ctx, req.(*UpdateCategoryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_QueryTagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTagInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).QueryTagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_QueryTagInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).QueryTagInfo(ctx, req.(*QueryTagInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_GetTagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).GetTagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_GetTagInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).GetTagInfo(ctx, req.(*GetTagInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_CreateTagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).CreateTagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_CreateTagInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).CreateTagInfo(ctx, req.(*CreateTagInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_UpdateTagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).UpdateTagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_UpdateTagInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).UpdateTagInfo(ctx, req.(*UpdateTagInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogStorageSvr_ServiceDesc is the grpc.ServiceDesc for BlogStorageSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogStorageSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog_storage_svr.BlogStorageSvr",
	HandlerType: (*BlogStorageSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCategoryInfo",
			Handler:    _BlogStorageSvr_QueryCategoryInfo_Handler,
		},
		{
			MethodName: "GetCategoryInfo",
			Handler:    _BlogStorageSvr_GetCategoryInfo_Handler,
		},
		{
			MethodName: "CreateCategoryInfo",
			Handler:    _BlogStorageSvr_CreateCategoryInfo_Handler,
		},
		{
			MethodName: "UpdateCategoryInfo",
			Handler:    _BlogStorageSvr_UpdateCategoryInfo_Handler,
		},
		{
			MethodName: "QueryTagInfo",
			Handler:    _BlogStorageSvr_QueryTagInfo_Handler,
		},
		{
			MethodName: "GetTagInfo",
			Handler:    _BlogStorageSvr_GetTagInfo_Handler,
		},
		{
			MethodName: "CreateTagInfo",
			Handler:    _BlogStorageSvr_CreateTagInfo_Handler,
		},
		{
			MethodName: "UpdateTagInfo",
			Handler:    _BlogStorageSvr_UpdateTagInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog_storage_svr.proto",
}
